
1、推送本地文件到github上

首先在github上要有一个库。

打开本地git Bash
git init     #初始化本地仓库
git add README.md     #添加文件
git commit -m "first commit"   #提交到本地仓库，同时备注
git remote add origin https://github.com/xxx-xxx/testpro.git   #关联远程仓库
git push -u origin master      #将本地仓库，推送到远程仓库


git pull origin master --allow-unrelated-histories    #拉取远程仓库，--allow表示允许所有合并
可能的错误解决：
	1、fatal: Authentication failed for 'https://gitee.com/yyjuan97/blog.git/'
	本地身份验证失败，到控制面板-用户账户-管理凭据 ：找到github的登录验证凭据，修改为正确的用户名和密码
	
	2、如果与远程仓库不是同一仓库会出现 ：hint: (e.g., 'git pull ...') before pushing again. 
	需要将远程仓库 pull下来   ，pull后会自动合并，命令：git pull origin master --allow-unrelated-histories
	然后再push到远程仓库。
	
			
2、当修改完文件后，提交
git add xxx
git commit -m xxx
git push -u origin master 



3、查看日志记录
git log



4、解决冲突-master分支上 ；当本地修改后，push到远程仓库时出现;error: failed to push some refs to 'https://gitee.com/yyjuan97/blog.git'
push 失败，则要pull到本地，看是否能自动合并，如果pull后出现  CONFLICT (content): Merge conflict in  合并错误，则找到文件，手动解决冲突问题；再add、commit 、push


5、版本回退： 
	git reflog   #查看版本记录
	git reset --hard 版本号   #将本地仓库，回退到指定版本，或者 git reset --hard head^ 回退到上个版本
	
	（要版本回退后 push到远程仓库，修改远程仓库版本）
	

6、把文件回到修改前，就是上一次commit的状态
	git checkout -- file
	
	
7、分支

git branch   #查看当前分支

git branch dev      #创建分支dev
git checkout dev	 #切换分支

通常使用：git checkout -b dev  #创建并切换dev分支


合并分支到master分支：先切换到master分支：git checkout master
							再使用命令  git merge dev  #合并dev分支到当前分支
	
	
删除分支：git branch -d dev   #删除dev分支

git branch -D dev    #删除没有合并过的分支

	
	
8、git的保护现场功能：
当需要临时修改分支其它内容，但是当前工作未完成时，可以使用现场保护功能
git stash  #保存当前分支的工作现场

当想回到工作现场时： git stash list  #查看现场列表

恢复现场，stash内容并不删除：git stash apply

恢复现场，删除stash:   git stash pop

手动删除现场：git stash drop

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	